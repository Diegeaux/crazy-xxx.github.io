// Generated by CoffeeScript 1.10.0
(function() {
  var Duties, Game, Kinks, OWRMain, Roll, StartSelector, Twists, button, d, d19, div, form, h1, label, li, option, p, ref, rollCounter, select, table, tbody, td, th, tr, ul;

  d = function() {
    return parseInt(Math.random() * 10);
  };

  d19 = function() {
    return parseInt(1 + Math.random() * 9);
  };

  Duties = ['[Choose 2 but only charge for cheaper one]', 'Suck for 5min', 'Suck for 10min', 'Suck for 5min, deepthroat every 30s', 'Deepthroat 20x', 'Deepthroat 40x', 'Deepthroat 10x in 1min', 'Deepthroat 20x in 90s, or deepthroat 100x', 'Suck for 5min, then deepthroat 20x', 'Suck for 10min, then deepthroat 40x'];

  Kinks = ['[Pick three]', 'Wear nippleclamps', 'Wear blindfold', 'Wear collar', 'Smear everything that comes out of your mouth on your face', 'After doing your duty, slap your face with the dildo 30 times', 'Spank your ass 50 times', 'Moan and beg for more', 'Wear nippleclamps & blindfold', 'Wear nippleclamps & collar'];

  Twists = ['Gangbang: X roll is cumulative', null, null, null, null, null, 'Cheap escape: do not collect money for this roll', 'He brings his friend: do double amount of work', 'His favorite bitch: do triple amount of work, get paid double', 'Your pimp comes around: give him half of your money'];

  rollCounter = 0;

  Roll = (function() {
    function Roll() {
      this.x = d();
      this.y = d();
      this.z = d();
      if (this.x === this.y && this.y === this.z) {
        this.x = this.y = this.z = 0;
      }
      this.x0 = [d19(), d19()];
      this.y0 = _.first(_.shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]), 3);
      this.key = rollCounter++;
    }

    Roll.prototype.numDuty = function() {
      var j, ref, res, results;
      res = [this.x];
      if (this.y === this.z) {
        res.push(this.y);
      }
      if (_.contains(res, 0)) {
        res = res.concat(this.x0);
      }
      if (this.z === 0) {
        res = (function() {
          results = [];
          for (var j = 1, ref = _.max(res); 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--){ results.push(j); }
          return results;
        }).apply(this);
      }
      return res;
    };

    Roll.prototype.duty = function() {
      var duties;
      duties = _.map(this.numDuty(), function(x) {
        return Duties[x];
      });
      if (this.z === 7) {
        duties = _.map(duties, function(duty) {
          return duty.replace(/(\d+)(min|x)/g, function(_, p1, p2) {
            return "" + (+p1 * 2) + p2;
          });
        });
      }
      if (this.z === 8) {
        duties = _.map(duties, function(duty) {
          return duty.replace(/(\d+)(min|x)/g, function(_, p1, p2) {
            return "" + (+p1 * 3) + p2;
          });
        });
      }
      return duties;
    };

    Roll.prototype.numKink = function() {
      var res;
      res = [this.y];
      if (this.x === this.z) {
        res.push(this.x);
      }
      if (_.contains(res, 0)) {
        res = res.concat(this.y0);
      }
      return res;
    };

    Roll.prototype.kink = function() {
      return _.map(this.numKink(), function(y) {
        return Kinks[y];
      });
    };

    Roll.prototype.twist = function() {
      var res;
      res = [this.z];
      if (this.x === this.y) {
        res.push(this.x);
      }
      return _.compact(_.map(res, function(z) {
        return Twists[z];
      }));
    };

    return Roll;

  })();

  ref = React.DOM, button = ref.button, div = ref.div, form = ref.form, h1 = ref.h1, label = ref.label, li = ref.li, option = ref.option, p = ref.p, select = ref.select, table = ref.table, tbody = ref.tbody, td = ref.td, th = ref.th, tr = ref.tr, ul = ref.ul;

  StartSelector = React.createClass({displayName: "StartSelector",
    getInitialState: function() {
      return {
        value: 0
      };
    },
    handleSubmit: function(e) {
      e.preventDefault();
      return this.props.started(this.state.value);
    },
    handleChange: function(e) {
      return this.setState({
        value: e.target.value
      });
    },
    render: function() {
      var x;
      return div({}, p({
        className: "lead"
      }, 'The game is not started. To start it select a value for A (target amount of money) and press Start.'), form({
        className: "form-inline",
        onSubmit: this.handleSubmit
      }, div({
        className: "form-group"
      }, label({}, 'A ='), select({
        className: "form-control",
        onChange: this.handleChange
      }, option({
        value: 0
      }, 'Random'), (function() {
        var j, results;
        results = [];
        for (x = j = 1; j <= 10; x = ++j) {
          results.push(option({
            key: x,
            value: x
          }, x + " ($" + x + "00)"));
        }
        return results;
      })())), ' ', button({
        type: "submit",
        className: "btn btn-primary"
      }, 'Start')));
    }
  });

  Game = React.createClass({displayName: "Game",
    getInitialState: function() {
      return {
        money: 0,
        target: this.props.A * 100,
        rolls: []
      };
    },
    createNextTask: function(e) {
      var roll;
      e.preventDefault();
      roll = new Roll();
      return this.setState({
        rolls: [roll].concat(this.state.rolls)
      });
    },
    listify: function(a) {
      if (a.length > 1) {
        return ul({}, _.map(a, function(el, i) {
          return li({
            key: i
          }, el);
        }));
      } else {
        return a[0];
      }
    },
    render: function() {
      return div({}, div({
        className: 'row'
      }, div({
        className: 'col-xs-6'
      }, "Your money: $" + this.state.money), div({
        className: 'col-xs-6 text-right'
      }, "Target money: $" + this.state.target)), div({
        className: 'row'
      }, div({
        className: 'col-xs-12'
      }, button({
        className: "btn btn-primary btn-lg center-block",
        onClick: this.createNextTask
      }, 'Get next task'))), div({
        className: 'row',
        style: {
          marginTop: 20
        }
      }, table({
        className: 'table table-striped'
      }, tbody({}, tr({}, th({
        className: 'col-xs-4'
      }, 'Duty'), th({
        className: 'col-xs-4'
      }, 'Kink'), th({
        className: 'col-xs-4'
      }, 'Twist')), _.map(this.state.rolls, (function(_this) {
        return function(roll, i) {
          var classes;
          classes = 0 === i ? {
            className: 'lead'
          } : {};
          return tr({
            key: roll.key
          }, td(classes, _this.listify(roll.duty())), td(classes, _this.listify(roll.kink())), td(classes, _this.listify(roll.twist())));
        };
      })(this))))));
    }
  });

  OWRMain = React.createClass({displayName: "OWRMain",
    getInitialState: function() {
      return {
        started: false
      };
    },
    startGame: function(a) {
      a || (a = parseInt(1 + Math.random() * 10));
      return this.setState({
        started: true,
        A: a
      });
    },
    render: function() {
      return div({
        className: "container"
      }, h1({}, 'OWRMain'), this.state.started ? React.createElement(Game, {
        "A": this.state.A
      }) : React.createElement(StartSelector, {
        "started": this.startGame
      }));
    }
  });

  ReactDOM.render(React.createElement(OWRMain, null), document.getElementById('content'));

}).call(this);
